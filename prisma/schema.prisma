datasource db {
    provider = "mysql"
    url      = env("DB_URI")
}

generator client {
    provider = "prisma-client-js"
}

model Users {
    id            Int          @id @default(autoincrement())
    username      String       @unique @db.VarChar(30)
    email         String       @unique @db.VarChar(50)
    name          String       @db.VarChar(50)
    countryCode   String       @db.VarChar(10)
    contactNumber String       @db.VarChar(50)
    userType      UserType?    @default(Recipient)
    password      String       @db.VarChar(250)
    verification  String?      @db.VarChar(255)
    verified      Boolean?     @default(false)
    active        Boolean?     @default(true)
    role          Role         @default(USER)
    createdAt     DateTime?    @default(now())
    updatedAt     DateTime?    @updatedAt
    membership    Memberships? @relation(fields: [membershipId], references: [id])
    membershipId  Int?
    listedItem    ListedItem[]
    donations     Donations[]
}

enum UserType {
    Recipient
    Donor
}

enum Role {
    USER
    ADMIN
}

model Donations {
    id          Int       @id @default(autoincrement())
    Users       Users?    @relation(fields: [usersId], references: [id])
    usersId     Int?
    name        String
    email       String
    countryCode String
    phone       String
    items       String
    amount      Decimal?  @db.Decimal(10, 2)
    createdAt   DateTime? @default(now())
    updatedAt   DateTime? @updatedAt
}

// Define the Memberships model
model Memberships {
    id            Int       @id @default(autoincrement())
    user          Users[]
    plan          Plan      @relation(fields: [planId], references: [id])
    planId        Int
    startDate     DateTime  @default(now())
    endDate       DateTime?
    status        Boolean   @default(true) // active, paused, canceled, expired, etc.
    paymentMethod String
    paymentStatus String
    active        Boolean   @default(true)
}

// Define the Plan model
model Plan {
    id           Int           @id @default(autoincrement())
    name         String
    description  String?
    price        Decimal       @db.Decimal(10, 2)
    actualPrice  Decimal       @default(0) @db.Decimal(10, 2)
    discountType DiscountTypes @default(Flat)
    discount     Float         @default(0)
    duration     Int // Duration in months, years, etc.
    currency     String        @db.VarChar(30)
    active       Boolean?      @default(true)
    createdAt    DateTime?     @default(now())
    updatedAt    DateTime?     @updatedAt
    features     Features[] // Array of features included in the plan
    Memberships  Memberships[]
}

enum DiscountTypes {
    Flat
    Percentage
}

//define features of plane
model Features {
    id          Int     @id @default(autoincrement())
    name        String
    description String?
    active      Boolean @default(true)
    Plan        Plan?   @relation(fields: [planId], references: [id])
    planId      Int?
}

// listed items

model ListedItem {
    post_id    Int                @id @default(autoincrement())
    slug       String             @unique @db.VarChar(250)
    name       String             @db.VarChar(100)
    desription String?
    category   String             @db.VarChar(100)
    expires    DateTime?
    likes      Likes[]
    views      Views[]
    images     Images[]
    createdAt  DateTime           @default(now())
    updatedAt  DateTime           @updatedAt
    active     Boolean            @default(true)
    status     ListedItem_Status? @default(Draft)
    user       Users              @relation(fields: [userId], references: [id])
    userId     Int
    comments   Comment[]
}

enum ListedItem_Status {
    Active
    Pending
    Draft
}

model Views {
    id         Int        @id @default(autoincrement())
    userId     Int
    postId     Int
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
    listedItem ListedItem @relation(fields: [postId], references: [post_id])
}

model Likes {
    id                Int         @id @default(autoincrement())
    user_id           Int
    post_id           Int
    createdAt         DateTime    @default(now())
    modifiedAt        DateTime    @updatedAt
    ListedItem        ListedItem? @relation(fields: [listedItemPost_id], references: [post_id])
    listedItemPost_id Int?
}

model Comment {
    id                Int         @id @default(autoincrement())
    content           String
    ListedItem        ListedItem? @relation(fields: [listedItemPost_id], references: [post_id])
    listedItemPost_id Int?
}

// listedItems images

model Images {
    id            Int         @id @default(autoincrement())
    imagesType    ImageTypes? @default(GALLARY)
    image         String
    ListedItem    ListedItem? @relation(fields: [listedItem_id], references: [post_id])
    listedItem_id Int?
}

enum ImageTypes {
    GALLARY
    ATTACHMENTS
}
